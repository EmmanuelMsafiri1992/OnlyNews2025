/**
 * TinyMCE Font Size Plugin
 *
 * This plugin adds a custom dropdown menu to the TinyMCE toolbar,
 * allowing users to select and apply different font sizes to their text.
 *
 * It defines a 'fontsize' button which, when clicked, opens a list of
 * predefined font sizes. Selecting a size applies it to the currently
 * selected text using the 'fontsize' command.
 */
tinymce.PluginManager.add('fontsize', function(editor) {
    // Define the list of font sizes to be displayed in the dropdown.
    // Each item has a 'text' (what the user sees) and a 'value' (the CSS font-size value).
    const fontSizes = [
        { text: '8pt', value: '8pt' },
        { text: '10pt', value: '10pt' },
        { text: '12pt', value: '12pt' },
        { text: '14pt', value: '14pt' },
        { text: '16pt', value: '16pt' },
        { text: '18pt', value: '18pt' },
        { text: '24pt', value: '24pt' },
        { text: '36pt', value: '36pt' },
        { text: '48pt', value: '48pt' }
    ];

    /**
     * Registers a custom button for the TinyMCE toolbar.
     * This button will act as a dropdown for font sizes.
     */
    editor.ui.registry.addMenuButton('fontsize', {
        text: 'Font Size', // Text displayed on the button
        // Removed potentially problematic icon, you can add back if needed
        // icon: 'text-size',
        fetch: function(callback) {
            // This function is called when the dropdown is opened.
            // It dynamically creates the menu items.
            const items = fontSizes.map(size => ({
                type: 'menuitem', // Type of menu item
                text: size.text,  // Text displayed in the menu
                onAction: function() {
                    // When a menu item is clicked, execute the 'fontsize' command
                    // with the selected value. This applies the font size to the text.
                    editor.execCommand('fontsize', false, size.value);
                }
            }));
            callback(items); // Pass the created menu items to the callback
        }
    });

    // Return an object with any setup/teardown logic if needed.
    // In this simple case, nothing specific is needed here.
    return {
        getMetadata: function() {
            return  {
                name: 'Font Size Plugin',
                url: 'http://example.com'
            };
        }
    };
});
